{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 PV_NoiseSynthP			return only bins that are unstable\
PV_PartialSynthP			return only bins that are stable\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\b0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 PV_NoiseSynthP and PV_PartialSynthP base these decisions on whether or not phase data across numFrames is within a given threshold\
\
PV_NoiseSynthP(buffer, threshold, numFrames, initflag)\
PV_PartialSynthP(buffer, threshold, numFrames, initflag)\
\
	buffer - the FFT buffer\
	threshold - a phase value (in radians) with which to allow values to pass through or be zeroed out\
	numFrames - the number of FFT frames needed to make the above decision\
	initflag - if 0, all bins are zeroed out while the initial is calculated, if 1, all bins pass through.\
\
Examples:
\f1\b0\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\{\cf2 SinOsc\cf0 .ar(440, 0, 0.5) + \cf2 PinkNoise\cf0 .ar(0.4)\}.play; \cf3 // a sample sig\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 SynthDef\cf0 (\cf4 \\partialsynth\cf0 , \{\cf2 arg\cf0  fftbuf;\
	\cf2 var\cf0  in, chain, out;\
	in = \cf2 SinOsc\cf0 .ar(440, 0, 0.5) + \cf2 PinkNoise\cf0 .ar(0.4);\
	chain = \cf2 FFT\cf0 (fftbuf, in);\
	\cf3 // resynhtesize according to MouseX if 0, only sound with VERY stable changes of phase\cf0 \
	\cf3 // will be returned. If pi, everything will be returned (+ or - pi)\cf0 \
	chain = \cf2 PV_PartialSynthP\cf0 (chain, \cf2 MouseX\cf0 .kr(0, pi));\
	out = \cf2 IFFT\cf0 (chain);\
	\cf2 Out\cf0 .ar(0, out.dup); \
	\}).load(s);\
\
s.boot; \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 // the fft buf\cf0 \
s.sendMsg(\cf4 \\b_alloc\cf0 , 0, 2048);\
\
\cf3 // start the synth\cf0 \
s.sendMsg(\cf4 \\s_new\cf0 , \cf4 \\partialsynth\cf0 , z = s.nextNodeID, 0, 1, \cf4 \\fftbuf\cf0 , 0);\
\cf3 // free it\cf0 \
s.sendMsg(\cf4 \\n_free\cf0 , z);\
s.sendMsg(\cf4 \\b_free\cf0 , 0);\
\
\
\
\cf2 SynthDef\cf0 (\cf4 \\noisesynth\cf0 , \{\cf2 arg\cf0  fftbuf;\
	\cf2 var\cf0  in, chain, out;\
	in = \cf2 SinOsc\cf0 .ar(440, 0, 0.5) + \cf2 PinkNoise\cf0 .ar(0.4);\
	chain = \cf2 FFT\cf0 (fftbuf, in);\
	\cf3 // resynhtesize according to MouseX if 0, every thing will be returned... as the value\cf0 \
	\cf3 // increases, bins with VERY stable change of phase are zeroed out, until everything is\cf0 \
	\cf3 // at +-pi\cf0 \
	chain = \cf2 PV_NoiseSynthP\cf0 (chain, \cf2 MouseX\cf0 .kr(0, pi));\
	out = \cf2 IFFT\cf0 (chain);\
	\cf2 Out\cf0 .ar(0, out.dup); \
	\}).load(s);\
\
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 // the fft buf\cf0 \
s.sendMsg(\cf4 \\b_alloc\cf0 , 0, 2048);\
\
\cf3 // start the synth\cf0 \
s.sendMsg(\cf4 \\s_new\cf0 , \cf4 \\noisesynth\cf0 , z = s.nextNodeID, 0, 1, \cf4 \\fftbuf\cf0 , 0);\
\cf3 // free it\cf0 \
s.sendMsg(\cf4 \\n_free\cf0 , z);\
s.sendMsg(\cf4 \\b_free\cf0 , 0);\
\
\
s.quit\
\
}