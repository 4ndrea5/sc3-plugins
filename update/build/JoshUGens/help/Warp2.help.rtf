{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-BoldOblique;
\f3\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Warp2			Warp a buffer with a time pointer, with window control
\f1\b0\fs24 \
\
Inspired by Chad Kirby's SuperCollider2 Warp1 class, which was inspired by Richard Karpen's sndwarp for CSound. A granular time strecher and pitchshifter. A buffer containing a table to be used for the window must be passed in. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 Warp2.ar(buffer, pointer, freqScale, windowSize, winBuf, overlaps, windowRandRatio, interp, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
	
\f0\b buffer
\f1\b0  - the buffer number of a mono soundfile.\
	
\f0\b pointer
\f1\b0  - the position in the buffer.  The value should be between 0 and 1, with 0 being the begining\
		of the buffer, and 1 the end.\
	
\f0\b freqScale
\f1\b0 - the amount of frequency shift. 1.0 is normal, 0.5 is one octave down, 2.0 is one octave up.\
		Negative values play the soundfile backwards.\
	
\f0\b windowSIze
\f1\b0  - the size of each grain window\
	
\f0\b winBuf
\f1\b0  - a buffer containing a window table.\
	
\f0\b overlaps
\f1\b0  - the number of overlaping windows.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 	windowRandRatio 
\f1\b0 - the amount of randomness to the windowing function.  Must be between 0 (no\
		randomness) to 1.0 (probably to random actually)
\f0\b \
	interp -
\f2\i  
\f1\i0\b0 the interpolation method used for pitchshifting grains. 1 = no interpolation. 2 = linear. \
		4 = cubic interpolation (more computationally intensive).
\f0\b \
\
\
Examples:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\b0\fs18 \cf0 s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f3\b0\fs18 \cf0 (\
var winenv;\
winenv = \cf2 Env\cf0 ([0, 1, 1, 0], [0.1, 0.8, 0.1], [5, 0, -5]).asSignal(1024);\
winenv.plot; // the window\
s.sendMsg(\cf3 \\b_allocRead\cf0 , 0, \cf4 "sounds/a11wlk01.wav"\cf0 , 0, -1);\
s.sendMsg(\cf3 \\b_alloc\cf0 , 1, 1024, 1, [\\b_setn, 1, 0, 1024] ++ winenv);\
\
\cf2 SynthDef\cf0 (\cf3 \\warp\cf0 , \{\cf2 arg\cf0  buffer = 0, winbuf = 1;\
	\cf2 var\cf0  out, pointer, filelength, pitch, env, dir;\
	pointer = Line.kr(0, 1, 15)\cf2 ;\
	pitch = LFNoise2.ar(1).range(0.25, 4.0).midiratio.round(0.25);\
\cf0 	dir = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([1, 1, -1, -1], [9.999, 0.001, 5]), doneAction: 0);\
	env = \cf2 EnvGen\cf0 .kr(\cf2 Env\cf0 ([0.01, 1, 1, 0.01], [0.1, 14, 0.9], \cf3 'exp'\cf0 ), doneAction: 2);\
	// control overlaps with MouseX\
	out = \cf2 Warp2\cf0 .ar(buffer, pointer, pitch, 0.1, winbuf, MouseX.kr(1, 10), 0.05, 2);\
	\cf2 Out\cf0 .ar(0, out);\
\}).send(s);\
\
)\
\
\
s.sendMsg(\cf3 \\s_new\cf0 , \cf3 \\warp\cf0 , 1000, 0, 0, \cf3 \\buffer\cf0 , 0, \\winbuf, 1);\
\
s.sendMsg(\\b_free, 0);\
s.sendMsg(\\b_free, 1);\
}