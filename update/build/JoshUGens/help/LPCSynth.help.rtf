{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 LPCSynth\
LPCVals -    					utilize LPC data\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 LPCSynth(buffer, signal, pointer, mul, add)\
#cps, rmso, err = LPCVals(buffer, pointer)\
\
- LPCSynth uses data from a LPC data file to filter a signal\
- LPCVals returns pitch, rms and error data from the LPC data file\
\
buffer - the buffer where data is stored from LPCFile (see LPCFile).\
pointer - a pointer into the LPC data file, where 0 is the begining and 1 is the end.\
signal - the signal to filter.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \ul \ulc0 Usage
\fs24 \ulnone \
\
This uses the fate.lpc file, created with the following command:\
\
lpanal -p 50 -h 300 fate.aiff fate.lpc\
\
-p = num poles\
-h = hop size in samples \
\
analysis window are 2X the hop size\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 s = \cf2 Server\cf0 .local.boot;\
\
\cf3 // this file came with the JoshUGens... Leonard Bernstein talking about Beethoven.\
// Place it in your SC3/sounds directory.\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 a = \cf2 LPCFile\cf0 .new(\cf4 "sounds/fate.lpc",\cf0  server: s).loadToBuffer;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \
(\
\{\
\cf2 var\cf0  cps, rmso, err, voc, noise, timepoint, dur;\
timepoint = \cf2 LFSaw\cf0 .ar(0.8/a.sndDur, 1, 0.5, 0.5);\
\
# cps, rmso, err = \cf2 LPCVals\cf0 .ar(a.buffer, timepoint);\
\cf3 // a periodic Blip to filter, amplitude is 1 - error\cf0 \
noise = \cf2 PinkNoise\cf0 .ar(err); \cf3 // a noise source\
\cf0 \
voc = In.ar(24);\
\cf3 // the rms values tend to be high... scale them back quite a bit!\cf0 \
\cf2 Out\cf0 .ar(0, \cf2 LPCSynth\cf0 .ar(a.buffer, voc + noise, timepoint, rmso)); \
\}.play(s)\
)\
\
\cf3 // clean up\cf0 \
s.sendBundle(0.1, [\cf5 \\b_free\cf0 , a.buffer]);\
\
\
}