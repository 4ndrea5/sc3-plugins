{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 FFTPercentile - Find a percentile of FFT energy spectrum
\f1\b0\fs34 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs22 \cf0 \

\f0\b\fs24 	FFTPercentile.kr(chain, fraction)\

\f2\b0 \
Calculates the cumulative distribution of the frequency spectrum, and outputs the frequency value which corresponds to the desired percentile.\
\
For example, to find the frequency at which 90% of the spectral energy lies below that frequency, you want the 90-percentile, which means the value of "fraction" should be 0.9.\
\
To get the spectral centroid use a "fraction" of 0.5.\
\
\
Examples:\

\f1\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs18 \cf0 s = \cf2 Server\cf0 .internal.boot; \
b = \cf2 Buffer\cf0 .alloc(s,2048,1);\
\
\cf3 // Simple demo with filtering white noise, and trying to infer the cutoff freq.\cf0 \
\cf3 // Move the mouse.\cf0 \
(\
\{\
\cf2 var\cf0  in, chain, realcutoff, estcutoff;\
realcutoff = \cf2 MouseX\cf0 .kr(0.00001,22050);\
in = \cf2 LPF\cf0 .ar(\cf2 WhiteNoise\cf0 .ar, realcutoff);\
chain = \cf2 FFT\cf0 (b.bufnum, in);\
estcutoff = \cf2 Lag\cf0 .kr(\cf2 FFTPercentile\cf0 .kr(chain, 0.9), 1);\
realcutoff.poll(Impulse.kr(1), "real cutoff");\
estcutoff.poll(Impulse.kr(1), "estimated cutoff");\
\cf2 Out\cf0 .ar(0, IFFT(chain));\
\cf2 Out\cf0 .kr(0, estcutoff * 22050.0.reciprocal);\
\}.scope;\
)\
\
\cf3 // Audio input - try different vowel/long-consonant sounds and see what comes out.\cf0 \
\cf3 // Specifically, change from "ssss" through to "aaaa" through to "wwww".\cf0 \
(\
\{\
\cf2 var\cf0  in, chain, perc;\
in = \cf2 AudioIn\cf0 .ar([1,2]).mean;\
chain = \cf2 FFT\cf0 (b.bufnum, in);\
\cf3 //Out.ar(0, in * 0.1);\cf0 \
perc = 
\fs20 \cf2 \CocoaLigature0 FFTPercentile\cf0 .kr(chain, 0.5);
\fs18 \CocoaLigature1 \
\cf2 Out\cf0 .ar(1, \cf2 LPF\cf0 .ar(\cf2 WhiteNoise\cf0 .ar, perc)); \cf3 //NB Outputting to right channel - handy on PowerBooks\cf0 \
\cf2 Out\cf0 .kr(0, perc * 22050.0.reciprocal);\
\}.scope;\
)\
}