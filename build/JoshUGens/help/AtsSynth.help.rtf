{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red96\green96\blue96;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 AtsSynth			
\fs28 Resynthesize sine data from an ATS analysis file
\fs36 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 AtsSynth.ar(atsbuffer, numPartials, partialStart, partialSkip, filePointer, freqMul, freqAdd, mul, add)\
	\
- resynthesizes information from an ATS file, with transformations.\
\
	atsbuffer - 
\f1\b0  the buffer number that contains the AtsFile information\

\f0\b 	numPartials - 
\f1\b0 the number of partials to synthesize\

\f0\b 	partialStart -
\f1\b0  the partial in the analysis to start the synthesis on. Partial 0 is the first partial.\

\f0\b 	partialSkip -
\f1\b0  an integer that indicates the increment of from partialStart of which partials to synthesize.\

\f0\b 	filePointer -
\f1\b0  a value (between 0 and 1) that indicates which part of the file to synthesize.  Accepts ugens \
		or a static value.\

\f0\b 	freqMul -
\f1\b0  a multiplier on the sinusoidal frequency information.\

\f0\b 	freqAdd - 
\f1\b0 a value to add to frequency information.\
	\

\f0\b **WARNING** 
\f1\b0 If you try to resynthesize partials that don't exist, those partials will fail silently.  All valid partials will still be synthesized.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs30 \cf0 \ul \ulc0 Usage
\f1\b0\fs24 \ulnone \
	 
\f0\b \ul \

\f1\b0 \ulnone For resynthesis purposes, an ATS file needs to be loaded into a buffer.  When loading an ATS file, you need to supply a buffer number to store ATS data in.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 s.boot;\
\
a = \cf2 AtsFile\cf0 .new(\cf3 "sounds/a11wlk01.ats"\cf0 ).loadToBuffer;\
\
( \cf4 //play just the resynth, with LFSaw pointing into the file\cf0 \
\{\
	\cf2 AtsNoiSynth\cf0 .ar(a.buffer, a.numPartials, 0, 1, \
		filePointer: 
\fs18 \cf2 LFSaw\cf0 .ar(a.sndDur.reciprocal, 1, 0.5, 0.5)
\fs20 , mul: 1)\
	\}.play(s);
\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 ( \cf4 //multiply frequencies by 1.5\cf0 \
\{\
	\cf2 AtsSynth\cf0 .ar(a.buffer, a.numPartials, 0, 1, \
		filePointer: 
\fs18 \cf2 LFSaw\cf0 .kr(a.sndDur.reciprocal, 1, 0.5, 0.5)
\fs20 , freqMul: 1.5, mul: 1)\
	\}.play(s);
\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 ( \cf4 //add 100 to all frequencies\cf0 \
\{\
	\cf2 AtsSynth\cf0 .ar(a.buffer, a.numPartials, 0, 1, \
		filePointer: 
\fs18 \cf2 LFSaw\cf0 .kr(a.sndDur.reciprocal, 1, 0.5, 0.5)
\fs20 , freqAdd: 100.0, mul: 1)\
	\}.play(s);
\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 ( \cf4 //resynthesize every third partial only (partial skip)\cf0 \
\{\
	\cf2 AtsSynth\cf0 .ar(a.buffer, a.numPartials * 0.3, 0, 3, \
		filePointer: 
\fs18 \cf2 LFSaw\cf0 .kr(a.sndDur.reciprocal, 1, 0.5, 0.5)
\fs20 , mul: 1)\
	\}.play(s);
\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 ( \cf4 //resynthesize only the top half of the partials\cf0 \
\{\
	\cf2 AtsSynth\cf0 .ar(a.buffer, a.numPartials * 0.5, a.numPartials * 0.5, 1, \
		filePointer: 
\fs18 \cf2 LFSaw\cf0 .kr(a.sndDur.reciprocal, 1, 0.5, 0.5)
\fs20 , mul: 1)\
	\}.play(s);
\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 );\
}