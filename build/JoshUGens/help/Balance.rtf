{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue191;\red0\green0\blue0;
\red0\green115\blue0;\red191\green0\blue0;\red0\green115\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 Balance -    					balances two signals with each other\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 Balance(in, test, numperiods, mul, add)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs28 \cf0 \ul \ulc0 Usage
\fs24 \ulnone \
\
in - the signal you want to balance\
test - the signal that should be used to balance in. If test is a k-rate sig, it will represent a target RMS.\
\
Balance will try to match the RMS levels of in to the RMS of test\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 s = \cf2 Server\cf0 .internal.boot;\
s.scope(2);\
\
\cf3 SynthDef\cf4 (\cf5 \\noise\cf4 , \{\cf3 arg\cf4  noiseout = 1;\
	\cf3 var\cf4  noise, filt;\
	noise = \cf3 WhiteNoise\cf4 .ar(\cf3 MouseX\cf4 .kr(0, 1));\
	filt = \cf3 BPF\cf4 .ar(noise, \cf3 LFNoise2\cf4 .kr(0.2, 440, 880), 0.001);\
	\cf6 // comment out to compare without balance\cf4 \
	filt = \cf3 Balance\cf4 .ar(filt, \cf3 Amplitude\cf4 .kr(noise, 0.01, 0.2).max(0.01));\
\cf6 //	filt = filt * 1000;\cf4 \
	\cf3 Out\cf4 .ar(0, [filt, noise * noiseout]);\
	\}).load(s);\cf0 \
	\
s.sendMsg(\cf7 \\s_new\cf0 , \cf7 \\noise\cf0 , a = s.nextNodeID, 0, 1);\
s.sendMsg(\cf7 \\n_set\cf0 , a, \cf7 \\noiseout\cf0 , 0);\
s.sendMsg(\cf7 \\n_free\cf0 , a);\
\
\cf2 SynthDef\cf0 (\cf7 \\test\cf0 , \{\
	\cf2 var\cf0  src, sig;\
	src = \cf2 SinOsc\cf0 .ar(440, 0, \cf2 MouseX\cf0 .kr(0, 1));\
	sig = \cf2 SinOsc\cf0 .ar(440, 0, 0.1);\
	\cf8 // comment out to compare without balance\cf0 \
	sig = \cf2 Balance\cf0 .ar(sig, src);\
	\cf2 Out\cf0 .ar(0, [src, sig]);\
	\}).load(s);\
	\
s.sendMsg(\cf7 \\s_new\cf0 , \cf7 \\test\cf0 , a = s.nextNodeID, 0, 1);\
\
s.sendMsg(\cf7 \\n_free\cf0 , a);\
}