{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf110
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green0\blue0;
\red0\green115\blue0;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 IEnvGen
\f1\b0\fs18 				
\f0\b\fs26 envelope generator for polling values from an InterplEnv
\f1\b0\fs18 \
\

\f0\b\fs24 superclass: UGen\
\
	*ar(ienvelope, index, mul, add)\
	*kr(ienvelope, index, mul, add)\

\f2\b0 \
	Plays back break point envelopes from the index point. The envelopes are instances of the InterplEnv 	class. See the 
\f0\b InterplEnv
\f2\b0  help file for more info. \

\f1\fs18 \
	\
	
\f0\b\fs24 ienvelope
\f2\b0  	an instance of InterplEnv (this is static for the life of the UGen)\
	
\f0\b index		
\f2\b0 a point to access within the InterplEnv\
\

\f1\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 // example\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 SynthDef\cf4 (\cf5 \\test\cf4 , \{\cf3 arg\cf4  gate = 1;\
	\cf3 var\cf4  env, sin;\
	sin = \cf3 SinOsc\cf4 .ar(440, 0, 1);\
	env = \cf3 InterplEnv\cf4 ([0, 0.6, 0.3, 1.0, 0], [0.1, 0.02, 0.4, 1.1], [\cf5 \\lin\cf4 , \cf5 \\exp\cf4 , -6, \cf5 \\sin\cf4 ]).plot;	\cf3 Out\cf4 .ar(0, sin * \
		\cf6 // use MouseX to index into the InterplEnv\cf4 \
		\cf3 IEnvGen\cf4 .kr(env, \cf3 MouseX\cf4 .kr(0, env.times.sum)) *\
		\cf3 EnvGen\cf4 .kr(\cf3 Env\cf4 .asr(0.01, 1, 0.01), gate, doneAction: 2);\
		)\
\}).load(s);\cf0 \
\
s = \cf7 Server\cf0 .local.boot;\
s.scope;\
\
s.sendMsg(\cf8 \\s_new\cf0 , \cf8 \\test\cf0 , a = s.nextNodeID, 0, 1);\
s.sendMsg(\cf8 \\n_set\cf0 , a, \\gate, 0);\
\
\cf2 // index with an SinOsc ... mouse controls amplitude of SinOsc\cf0 \
\cf7 SynthDef\cf0 (\cf8 \\test\cf0 , \{\
	\cf7 var\cf0  env, sin;\
	sin = \cf7 SinOsc\cf0 .ar(440, 0, MouseX.kr(0, 1));\
	env = \cf7 InterplEnv\cf0 ([-1, -0.7, 0.7, 1], [0.4333, 0.1333, 0.4334], \cf8 \\lin\cf0 );\
	\cf7 Out\cf0 .ar(0, \cf7 IEnvGen\cf0 .ar(env, sin.range(0, 1))) \
\}).load(s);\
\
s.sendMsg(\cf8 \\s_new\cf0 , \cf8 \\test\cf0 , a = s.nextNodeID, 0, 1);\
s.sendMsg(\cf8 \\n_free\cf0 , a);}