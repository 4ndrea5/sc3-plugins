{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf390
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf2 PV_NoiseSynthF			return only bins that are unstable\
PV_PartialSynthF			return only bins that are stable\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\b0\fs18 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf2 PV_NoiseSynthF and PV_PartialSynthF base these decisions on whether or not freq data across numFrames is within a given threshold\
\
PV_NoiseSynthF(buffer, threshold, numFrames, initflag)\
PV_PartialSynthF(buffer, threshold, numFrames, initflag)\
\
	buffer - the FFT buffer\
	threshold - a phase value (in radians) with which to allow values to pass through or be zeroed out\
	numFrames - the number of FFT frames needed to make the above decision\
	initflag - if 0, all bins are zeroed out while the initial is calculated, if 1, all bins pass through.\
\
Examples:
\f1\b0\fs18 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \
\{\cf3 SinOsc\cf2 .ar(440, 0, 0.5) + \cf3 PinkNoise\cf2 .ar(0.4)\}.play; \cf4 // a sample sig\cf2 \
\
\cf3 SynthDef\cf2 (\cf5 \\partialsynth\cf2 , \{\cf3 arg\cf2  fftbuf;\
	\cf3 var\cf2  in, chain, out;\
	in = \cf3 SinOsc\cf2 .ar(440, 0, 0.5) + \cf3 PinkNoise\cf2 .ar(0.4);\
	chain = \cf3 FFT\cf2 (fftbuf, in);\
	\cf4 // resynhtesize according to MouseX. If 0, only sound with VERY stable changes of frequecy\cf2 \
	\cf4 // will be returned. Upper limit should be Nyqust / nBins , e.g. 22050 / 2048 -> 21.532\cf2 \
	\cf4 // or + and - 21.532\cf2 \
	chain = \cf3 PV_PartialSynthF\cf2 (chain, \cf3 MouseX\cf2 .kr(0, 21.532), 6, 0);\
	out = \cf3 IFFT\cf2 (chain);\
	\cf3 Out\cf2 .ar(0, out.dup); \
	\}).load(s);\
\
s.boot;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 // the fft buf\cf2 \
s.sendMsg(\cf5 \\b_alloc\cf2 , 0, 2048);\
\
\cf4 // start the synth\cf2 \
s.sendMsg(\cf5 \\s_new\cf2 , \cf5 \\partialsynth\cf2 , z = s.nextNodeID, 0, 1, \cf5 \\fftbuf\cf2 , 0);\
\cf4 // free it\cf2 \
s.sendMsg(\cf5 \\n_free\cf2 , z);\
s.sendMsg(\cf5 \\b_free\cf2 , 0);\
\
\
\
\cf3 SynthDef\cf2 (\cf5 \\noisesynth\cf2 , \{\cf3 arg\cf2  fftbuf;\
	\cf3 var\cf2  in, chain, out;\
	in = \cf3 SinOsc\cf2 .ar(440, 0, 0.5) + \cf3 PinkNoise\cf2 .ar(0.4);\
	chain = \cf3 FFT\cf2 (fftbuf, in);\
	\cf4 // resynhtesize according to MouseX. If 0, only sound with VERY stable changes of frequecy\cf2 \
	\cf4 // will be zeroed out. Upper limit should be Nyqust / nbins , e.g. 22050 / 1024 -> 21.532\cf2 \
	\cf4 // or + and - 21.532\cf2 \
	chain = \cf3 PV_NoiseSynthF\cf2 (chain, \cf3 MouseX\cf2 .kr(0, 21.532));\
	out = \cf3 IFFT\cf2 (chain);\
	\cf3 Out\cf2 .ar(0, out.dup); \
	\}).load(s);\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf4 // the fft buf\cf2 \
s.sendMsg(\cf5 \\b_alloc\cf2 , 0, 2048);\
\
\cf4 // start the synth\cf2 \
s.sendMsg(\cf5 \\s_new\cf2 , \cf5 \\noisesynth\cf2 , z = s.nextNodeID, 0, 1, \cf5 \\fftbuf\cf2 , 0);\
\cf4 // free it\cf2 \
s.sendMsg(\cf5 \\n_free\cf2 , z);\
s.sendMsg(\cf5 \\b_free\cf2 , 0);\
\
\
s.quit\
\
}