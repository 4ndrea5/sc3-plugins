{\rtf1\mac\ansicpg10000\cocoartf102
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 ArialMT;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs26 \cf2 /*\
This package contains a number of ports of the\
Stk physical models.  They are not highly optimized\
and initializations can be very expensive.  To\
get around this triggers are supplied in all\
units so that they can be fired up in paused states\
and subsequently triggered and paused, thus greatly reducing\
initialization cost.  The downside of this is that\
you have to keep track of the nodes, but that's not\
a big deal.  I've been initializing a bunch of instruments\
at the start, pausing for a freq seconds and then starting\
to play.\
\
Installation instructions\
\
1) The rawwaves folder has to be parallel\
to the SuperCollider.app folder.  i.e. the\
units will look for ../rawwaves/etc.  If you\
get 'realtime errors' it is in the wrong place.\
\
2) Copy all the .scx files to the plugins dir.\
\
3) These were compiled under 10.3.5 so they will\
only work under XCode systems.\
\
4) Copy the classdefs file to the SCClassLibrary\
and recompile the Library.\
\
5) tests.rtf will quickly test each of the units.\
If you get sound they're working.\
\
6) The classdefs.sc file contains minimal information\
about each of the units.  When it says that arguments\
are modulateable it means that they can also be changed\
when retriggering.\
\
7) Triggers\
When the trigger changes from a negative to a positive\
value the unit will do an STK noteOn().  In a number of\
these models the attack portion has particular and \
noticeable qualities so this can make a big difference.\
It also allows you to avoid the expensive initializations.\
\
Here is an example using the Clarinet model\
*/\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs28 \cf3 (	\
\cf4 SynthDef\cf3 (\cf5 "StkClarinet"\cf3 , \{\cf4 arg\cf3   freq=440,reedstiffness=64,noisegain=10,vibfreq=64,\
 				vibgain=10,breathpressure=64, gain=0.2,gate=1,bus=0, \
 				lag = 0.1,sloc=0,riset=0.2,decayt=0.2 ;\
\
		\cf4 var\cf3  z,env;\
		env  =  \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .adsr(attackTime:riset, decayTime:0,sustainLevel:1,\
						releaseTime:0.1,peakLevel:1),gate:gate, doneAction:0);\
\
		z = \cf4 StkClarinet\cf3 .ar(\
 			freq:\cf4 Lag\cf3 .kr(freq, lag),\
 			reedstiffness:reedstiffness,\
 			noisegain:noisegain,\
 			vibfreq:vibfreq,\
 			vibgain:vibgain,\
 			breathpressure:breathpressure,\
 			trig:gate);\
		\cf4 Out\cf3 .ar(bus, \cf4 Pan2\cf3 .ar(z,sloc)*env*gain);\
	\}).load(s);\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs26 \cf3 \
\cf2 // test synthdef\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs28 \cf4 Synth\cf3 (\cf5 "StkClarinet"\cf3 , [\cf6 \\riset\cf3 , 12]).play\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs26 \cf3 \
\cf2 // start up in paused state (usually necessary to slightly defer\cf3 \
\cf2 //	the pause for some reason\cf3 \
\
\{  
\f1\fs28 s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "StkClarinet"\cf3 , n = s.nextNodeID ,0,0, \cf6 \\freq\cf3 , 440, \cf6 \\gate\cf3 , -1, \cf6 \\reedstiffness\cf3 , 64,\cf6 \\i_bus\cf3 , 0);  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3  	\{s.sendMsg(\cf6 \\n_run\cf3 , n, 0)\}.defer(0.01); \}\
\cf2 // trigger a note\cf3 \
  	s.sendBundle(\cf4 nil\cf3 , [\cf6 \\n_set\cf3 ,n,  \cf6 \\gate\cf3 , 1, \cf6 \\freq\cf3 , 440, \\gain, 0.1], [\cf6 \\n_run\cf3 , n,1]);\
 \cf2 // trigger another note \cf3 \
  	s.sendBundle(\cf4 nil\cf3 , [\cf6 \\n_set\cf3 ,n,  \cf6 \\gate\cf3 , 1, \cf6 \\freq\cf3 , 540, \cf6 \\lag\cf3 , 0.1], [\cf6 \\n_run\cf3 , n,1]);\
 \cf2 // turn it off\cf3 \
 	s.sendMsg(\cf6 \\n_set\cf3 , n, \cf6 \\gate\cf3 , -1.2);\
 \cf2 // pause the unit and free up the CPU\cf3 \
 	s.sendMsg(\cf6 \\n_run\cf3 , n, 0);\
 \cf2 // start up another note\cf3 \
   	s.sendBundle(\cf4 nil\cf3 , [\cf6 \\n_set\cf3 ,n,  \cf6 \\gate\cf3 , 1, \cf6 \\freq\cf3 , 100, \\vibgain, 50, \\breathpressure, 80, \cf6 \\lag\cf3 ,0], [\cf6 \\n_run\cf3 , n,1]);\
\cf2 // etc ( any parameters you change will apply to all subsequent notes)
\f0\fs26 \cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 \
}